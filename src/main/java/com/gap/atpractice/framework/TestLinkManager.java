package com.gap.atpractice.framework;

import br.eti.kinoshita.testlinkjavaapi.TestLinkAPI;
import br.eti.kinoshita.testlinkjavaapi.constants.ExecutionStatus;
import br.eti.kinoshita.testlinkjavaapi.model.Build;
import br.eti.kinoshita.testlinkjavaapi.model.TestCase;
import br.eti.kinoshita.testlinkjavaapi.model.TestPlan;
import br.eti.kinoshita.testlinkjavaapi.model.TestProject;
import br.eti.kinoshita.testlinkjavaapi.util.TestLinkAPIException;
import org.apache.xpath.operations.Bool;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.Map;

/**
 * Created by keyhi on 6/14/2017.
 */
public class TestLinkManager extends TestLinkAPI{

    /**
     * Access TestLink
     * @param URL TestLink URL to access from API
     * @param devKey Key generated by TestLink
     * @throws TestLinkAPIException
     * @throws MalformedURLException
     */
    public TestLinkManager(String URL, String devKey) throws TestLinkAPIException, MalformedURLException {
        super(new URL(URL), devKey);
    }

    /**
     * From API create a new TestLink Project
     * @param testProjectName String with project name
     * @param testProjectPrefix String with project prefix
     * @param notes String with notes
     * @param enableRequirements true if requirements are enabled, false if not
     * @param enableTestPriority true if test case priority is enabled, false if not
     * @param enableAutomation true if automation enabled
     * @param enableInventory true if inventory enabled, false if not
     * @param isActive true if project is active, false if not
     * @param isPublic true if project is public, false if not
     * @return created TestProject instance
     */
    public TestProject createTestlinkProject(String testProjectName, String testProjectPrefix, String notes, Boolean
            enableRequirements, Boolean enableTestPriority, Boolean enableAutomation, Boolean enableInventory, Boolean isActive, Boolean isPublic){

        return this.createTestProject(testProjectName, testProjectPrefix, notes, enableRequirements, enableTestPriority,
                enableAutomation, enableInventory, isActive, isPublic);
    }

    /**
     * From API create a new TestLink Plan
     * @param planName String with new plan name
     * @param projectName String with project Name to associate plan
     * @param notes String with notes
     * @param isActive true if plan is active, false if not
     * @param isPublic true if is public, false if not
     * @return new TestPlan instance
     */
    public TestPlan createTestLinkPlan(String planName, String projectName, String notes, Boolean isActive, Boolean isPublic){
        return this.createTestPlan(planName, projectName, notes, isActive, isPublic);
    }

    /**
     *From API create a new TestLink Build
     * @param testplanId number of test plan id where Build to associate build
     * @param buildName String build name
     * @param buildNotes String guild notes
     * @return new Build instance
     */
    public Build createTestBuild(Integer testplanId, String buildName, String buildNotes){
        return this.createBuild(testplanId, buildName, buildNotes);
    }

    /**
     *From API add test cases to test plan
     * @param testCaseId Test case id to add to Plan
     * @param testProjectId number of test project id
     * @param testPlanId number of test plan id
     * @param version version number
     * @param platformId platform id number
     * @param urgency urgency number
     * @return 2264 code if test case successfully added to plan
     */
    public int addTestCasesToTestPlan(Integer testCaseId, Integer testProjectId, Integer testPlanId, Integer version, Integer platformId, Integer urgency){
        return this.addTestCaseToTestPlan(testProjectId, testPlanId, testCaseId, version, platformId, 0, urgency);
    }

    /**
     *From API update test run status
     * @param testCaseId test case id number
     * @param testCaseExternalId test case external id number
     * @param testPlanId test plan id number
     * @param status status code
     * @param buildId build id number
     * @param buildName String build name
     * @param notes String note
     * @param guess true if guess, false if not
     * @param bugId String bug id
     * @param platformId platform id number
     * @param platformName platform name number
     * @param customFields custom field Map of strings
     * @param overwrite true
     */
    public void updateTestRunsStatus(Integer testCaseId, Integer testCaseExternalId, Integer testPlanId, ExecutionStatus status, Integer buildId, String buildName,
                                     String notes, Boolean guess, String bugId, Integer platformId, String platformName, Map<String, String> customFields, Boolean overwrite){
        this.setTestCaseExecutionResult(testCaseId, testCaseExternalId, testPlanId, status, buildId, buildName, notes, guess, bugId, platformId, platformName, customFields, overwrite);
    }

    /**
     * Validate if a test case is already added to the test plan
     * @param testPlanId Test plan to check
     * @param buildId Build id to check
     * @param testCaseId test case id to check
     * @return true if exists, false if doesn't
     */
    public Boolean isTestCaseAddedToTestPlan(Integer testPlanId, Integer buildId, Integer testCaseId){
        TestCase[] testCasesForTestPlan = this.getTestCasesForTestPlan(testPlanId, null, buildId, null, null, null,
                null, null, null, null, null);

        Boolean exists = false;

        for (TestCase testCase : testCasesForTestPlan){
            exists = testCase.getId().equals(testCaseId)? true:false;
        }

        return exists;
    }
}
